{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport * as THREE from 'three';\nconst FullScreenTrapezoids = () => {\n  _s();\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n    const camera = new THREE.OrthographicCamera(window.innerWidth / -2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / -2, 1, 1000);\n    camera.position.z = 5;\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    const trapezoidGeometry = new THREE.BufferGeometry();\n\n    // Vertices for a trapezoid (you can modify these for different shapes)\n    const vertices = new Float32Array([-25, -25, 0,\n    // bottom left\n    25, -25, 0,\n    // bottom right\n    15, 25, 0,\n    // top right\n    -15, 25, 0 // top left\n    ]);\n    trapezoidGeometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n    trapezoidGeometry.setIndex([0, 1, 2, 0, 2, 3]); // Define the faces of the trapezoid\n\n    const material = new THREE.MeshBasicMaterial({\n      color: 0xffffff,\n      side: THREE.DoubleSide\n    });\n    const cols = Math.ceil(window.innerWidth / 50);\n    const rows = Math.ceil(window.innerHeight / 50);\n    const trapezoids = [];\n\n    // Create and place trapezoids in the grid\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        const trapezoid = new THREE.Mesh(trapezoidGeometry, material);\n        trapezoid.position.set((j - cols / 2) * 50 + 25, (i - rows / 2) * 50 + 25, 0);\n        trapezoid.userData.offset = Math.random() * Math.PI * 2;\n        trapezoid.userData.scaleSpeed = 0.5 + Math.random();\n        scene.add(trapezoid);\n        trapezoids.push(trapezoid);\n      }\n    }\n    function animate() {\n      requestAnimationFrame(animate);\n      const time = performance.now() * 0.001;\n      trapezoids.forEach(trapezoid => {\n        const scaleFactor = Math.sin(time * trapezoid.userData.scaleSpeed + trapezoid.userData.offset);\n        const scaleValue = Math.abs(scaleFactor);\n        trapezoid.scale.set(scaleValue, scaleValue, 1);\n      });\n      renderer.render(scene, camera);\n    }\n    animate();\n    window.addEventListener('resize', () => {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.left = window.innerWidth / -2;\n      camera.right = window.innerWidth / 2;\n      camera.top = window.innerHeight / 2;\n      camera.bottom = window.innerHeight / -2;\n      camera.updateProjectionMatrix();\n    });\n    return () => {\n      document.body.removeChild(renderer.domElement);\n    };\n  }, []);\n  return null;\n};\n_s(FullScreenTrapezoids, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = FullScreenTrapezoids;\nexport default FullScreenTrapezoids;\nvar _c;\n$RefreshReg$(_c, \"FullScreenTrapezoids\");","map":{"version":3,"names":["React","useEffect","THREE","FullScreenTrapezoids","_s","scene","Scene","background","Color","camera","OrthographicCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","setSize","document","body","appendChild","domElement","trapezoidGeometry","BufferGeometry","vertices","Float32Array","setAttribute","BufferAttribute","setIndex","material","MeshBasicMaterial","color","side","DoubleSide","cols","Math","ceil","rows","trapezoids","i","j","trapezoid","Mesh","set","userData","offset","random","PI","scaleSpeed","add","push","animate","requestAnimationFrame","time","performance","now","forEach","scaleFactor","sin","scaleValue","abs","scale","render","addEventListener","left","right","top","bottom","updateProjectionMatrix","removeChild","_c","$RefreshReg$"],"sources":["/Users/callumd/Desktop/Tech901-WebDev/website/src/pages/Home.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport * as THREE from 'three';\n\nconst FullScreenTrapezoids = () => {\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n\n    const camera = new THREE.OrthographicCamera(\n      window.innerWidth / -2,\n      window.innerWidth / 2,\n      window.innerHeight / 2,\n      window.innerHeight / -2,\n      1,\n      1000\n    );\n    camera.position.z = 5;\n\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n\n    const trapezoidGeometry = new THREE.BufferGeometry();\n    \n    // Vertices for a trapezoid (you can modify these for different shapes)\n    const vertices = new Float32Array([\n      -25, -25, 0,  // bottom left\n       25, -25, 0,  // bottom right\n       15,  25, 0,  // top right\n      -15,  25, 0   // top left\n    ]);\n\n    trapezoidGeometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n    trapezoidGeometry.setIndex([0, 1, 2, 0, 2, 3]);  // Define the faces of the trapezoid\n\n    const material = new THREE.MeshBasicMaterial({ color: 0xffffff, side: THREE.DoubleSide });\n\n    const cols = Math.ceil(window.innerWidth / 50);\n    const rows = Math.ceil(window.innerHeight / 50);\n\n    const trapezoids = [];\n\n    // Create and place trapezoids in the grid\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        const trapezoid = new THREE.Mesh(trapezoidGeometry, material);\n        trapezoid.position.set(\n          (j - cols / 2) * 50 + 25,\n          (i - rows / 2) * 50 + 25,\n          0\n        );\n        trapezoid.userData.offset = Math.random() * Math.PI * 2;\n        trapezoid.userData.scaleSpeed = 0.5 + Math.random();\n        scene.add(trapezoid);\n        trapezoids.push(trapezoid);\n      }\n    }\n\n    function animate() {\n      requestAnimationFrame(animate);\n\n      const time = performance.now() * 0.001;\n\n      trapezoids.forEach((trapezoid) => {\n        const scaleFactor = Math.sin(time * trapezoid.userData.scaleSpeed + trapezoid.userData.offset);\n        const scaleValue = Math.abs(scaleFactor);\n        trapezoid.scale.set(scaleValue, scaleValue, 1);\n      });\n\n      renderer.render(scene, camera);\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.left = window.innerWidth / -2;\n      camera.right = window.innerWidth / 2;\n      camera.top = window.innerHeight / 2;\n      camera.bottom = window.innerHeight / -2;\n      camera.updateProjectionMatrix();\n    });\n\n    return () => {\n      document.body.removeChild(renderer.domElement);\n    };\n  }, []);\n\n  return null;\n};\n\nexport default FullScreenTrapezoids;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAE9B,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjCH,SAAS,CAAC,MAAM;IACd,MAAMI,KAAK,GAAG,IAAIH,KAAK,CAACI,KAAK,CAAC,CAAC;IAC/BD,KAAK,CAACE,UAAU,GAAG,IAAIL,KAAK,CAACM,KAAK,CAAC,QAAQ,CAAC;IAE5C,MAAMC,MAAM,GAAG,IAAIP,KAAK,CAACQ,kBAAkB,CACzCC,MAAM,CAACC,UAAU,GAAG,CAAC,CAAC,EACtBD,MAAM,CAACC,UAAU,GAAG,CAAC,EACrBD,MAAM,CAACE,WAAW,GAAG,CAAC,EACtBF,MAAM,CAACE,WAAW,GAAG,CAAC,CAAC,EACvB,CAAC,EACD,IACF,CAAC;IACDJ,MAAM,CAACK,QAAQ,CAACC,CAAC,GAAG,CAAC;IAErB,MAAMC,QAAQ,GAAG,IAAId,KAAK,CAACe,aAAa,CAAC,CAAC;IAC1CD,QAAQ,CAACE,OAAO,CAACP,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;IACvDM,QAAQ,CAACC,IAAI,CAACC,WAAW,CAACL,QAAQ,CAACM,UAAU,CAAC;IAE9C,MAAMC,iBAAiB,GAAG,IAAIrB,KAAK,CAACsB,cAAc,CAAC,CAAC;;IAEpD;IACA,MAAMC,QAAQ,GAAG,IAAIC,YAAY,CAAC,CAChC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;IAAG;IACb,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;IAAG;IACb,EAAE,EAAG,EAAE,EAAE,CAAC;IAAG;IACd,CAAC,EAAE,EAAG,EAAE,EAAE,CAAC,CAAG;IAAA,CACf,CAAC;IAEFH,iBAAiB,CAACI,YAAY,CAAC,UAAU,EAAE,IAAIzB,KAAK,CAAC0B,eAAe,CAACH,QAAQ,EAAE,CAAC,CAAC,CAAC;IAClFF,iBAAiB,CAACM,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAE;;IAEjD,MAAMC,QAAQ,GAAG,IAAI5B,KAAK,CAAC6B,iBAAiB,CAAC;MAAEC,KAAK,EAAE,QAAQ;MAAEC,IAAI,EAAE/B,KAAK,CAACgC;IAAW,CAAC,CAAC;IAEzF,MAAMC,IAAI,GAAGC,IAAI,CAACC,IAAI,CAAC1B,MAAM,CAACC,UAAU,GAAG,EAAE,CAAC;IAC9C,MAAM0B,IAAI,GAAGF,IAAI,CAACC,IAAI,CAAC1B,MAAM,CAACE,WAAW,GAAG,EAAE,CAAC;IAE/C,MAAM0B,UAAU,GAAG,EAAE;;IAErB;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,EAAEE,CAAC,EAAE,EAAE;MAC7B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,IAAI,EAAEM,CAAC,EAAE,EAAE;QAC7B,MAAMC,SAAS,GAAG,IAAIxC,KAAK,CAACyC,IAAI,CAACpB,iBAAiB,EAAEO,QAAQ,CAAC;QAC7DY,SAAS,CAAC5B,QAAQ,CAAC8B,GAAG,CACpB,CAACH,CAAC,GAAGN,IAAI,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,EACxB,CAACK,CAAC,GAAGF,IAAI,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,EACxB,CACF,CAAC;QACDI,SAAS,CAACG,QAAQ,CAACC,MAAM,GAAGV,IAAI,CAACW,MAAM,CAAC,CAAC,GAAGX,IAAI,CAACY,EAAE,GAAG,CAAC;QACvDN,SAAS,CAACG,QAAQ,CAACI,UAAU,GAAG,GAAG,GAAGb,IAAI,CAACW,MAAM,CAAC,CAAC;QACnD1C,KAAK,CAAC6C,GAAG,CAACR,SAAS,CAAC;QACpBH,UAAU,CAACY,IAAI,CAACT,SAAS,CAAC;MAC5B;IACF;IAEA,SAASU,OAAOA,CAAA,EAAG;MACjBC,qBAAqB,CAACD,OAAO,CAAC;MAE9B,MAAME,IAAI,GAAGC,WAAW,CAACC,GAAG,CAAC,CAAC,GAAG,KAAK;MAEtCjB,UAAU,CAACkB,OAAO,CAAEf,SAAS,IAAK;QAChC,MAAMgB,WAAW,GAAGtB,IAAI,CAACuB,GAAG,CAACL,IAAI,GAAGZ,SAAS,CAACG,QAAQ,CAACI,UAAU,GAAGP,SAAS,CAACG,QAAQ,CAACC,MAAM,CAAC;QAC9F,MAAMc,UAAU,GAAGxB,IAAI,CAACyB,GAAG,CAACH,WAAW,CAAC;QACxChB,SAAS,CAACoB,KAAK,CAAClB,GAAG,CAACgB,UAAU,EAAEA,UAAU,EAAE,CAAC,CAAC;MAChD,CAAC,CAAC;MAEF5C,QAAQ,CAAC+C,MAAM,CAAC1D,KAAK,EAAEI,MAAM,CAAC;IAChC;IAEA2C,OAAO,CAAC,CAAC;IAETzC,MAAM,CAACqD,gBAAgB,CAAC,QAAQ,EAAE,MAAM;MACtChD,QAAQ,CAACE,OAAO,CAACP,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;MACvDJ,MAAM,CAACwD,IAAI,GAAGtD,MAAM,CAACC,UAAU,GAAG,CAAC,CAAC;MACpCH,MAAM,CAACyD,KAAK,GAAGvD,MAAM,CAACC,UAAU,GAAG,CAAC;MACpCH,MAAM,CAAC0D,GAAG,GAAGxD,MAAM,CAACE,WAAW,GAAG,CAAC;MACnCJ,MAAM,CAAC2D,MAAM,GAAGzD,MAAM,CAACE,WAAW,GAAG,CAAC,CAAC;MACvCJ,MAAM,CAAC4D,sBAAsB,CAAC,CAAC;IACjC,CAAC,CAAC;IAEF,OAAO,MAAM;MACXlD,QAAQ,CAACC,IAAI,CAACkD,WAAW,CAACtD,QAAQ,CAACM,UAAU,CAAC;IAChD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,IAAI;AACb,CAAC;AAAClB,EAAA,CAtFID,oBAAoB;AAAAoE,EAAA,GAApBpE,oBAAoB;AAwF1B,eAAeA,oBAAoB;AAAC,IAAAoE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}