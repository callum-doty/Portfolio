{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport * as THREE from 'three';\nconst FullScreenGridBoxes = () => {\n  _s();\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n\n    // Get window dimensions to calculate box size\n    const windowWidth = window.innerWidth;\n    const windowHeight = window.innerHeight;\n    const boxSize = Math.min(windowWidth / 10, windowHeight / 10); // Adjust based on grid size (10x10)\n\n    // Create geometry and material\n    const geometry = new THREE.BoxGeometry(boxSize, boxSize, boxSize);\n    const material = new THREE.MeshBasicMaterial({\n      color: 0xffffff\n    });\n\n    // Arrange boxes in a 2D grid to fit the window\n    const rows = Math.ceil(windowHeight / boxSize);\n    const cols = Math.ceil(windowWidth / boxSize);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        const cube = new THREE.Mesh(geometry, material);\n        cube.position.set((i - rows / 2) * boxSize, (j - cols / 2) * boxSize, 0 // Z-plane for 2D effect\n        );\n        scene.add(cube);\n      }\n    }\n    camera.position.z = boxSize * 1.5; // Adjust camera position\n\n    // Animate the scene\n    function animate() {\n      requestAnimationFrame(animate);\n      scene.children.forEach(cube => {\n        cube.rotation.x += 0.01;\n        cube.rotation.y += 0.01;\n      });\n      renderer.render(scene, camera);\n    }\n    animate();\n\n    // Handle window resize\n    window.addEventListener('resize', () => {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n    });\n    return () => {\n      document.body.removeChild(renderer.domElement);\n    };\n  }, []);\n  return null;\n};\n_s(FullScreenGridBoxes, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = FullScreenGridBoxes;\nexport default FullScreenGridBoxes;\nvar _c;\n$RefreshReg$(_c, \"FullScreenGridBoxes\");","map":{"version":3,"names":["React","useEffect","THREE","FullScreenGridBoxes","_s","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","document","body","appendChild","domElement","windowWidth","windowHeight","boxSize","Math","min","geometry","BoxGeometry","material","MeshBasicMaterial","color","rows","ceil","cols","i","j","cube","Mesh","position","set","add","z","animate","requestAnimationFrame","children","forEach","rotation","x","y","render","addEventListener","aspect","updateProjectionMatrix","removeChild","_c","$RefreshReg$"],"sources":["/Users/callumd/Desktop/Tech901-WebDev/website/src/pages/Home.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport * as THREE from 'three';\n\nconst FullScreenGridBoxes = () => {\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n\n    // Get window dimensions to calculate box size\n    const windowWidth = window.innerWidth;\n    const windowHeight = window.innerHeight;\n    const boxSize = Math.min(windowWidth / 10, windowHeight / 10); // Adjust based on grid size (10x10)\n\n    // Create geometry and material\n    const geometry = new THREE.BoxGeometry(boxSize, boxSize, boxSize);\n    const material = new THREE.MeshBasicMaterial({ color: 0xffffff });\n\n    // Arrange boxes in a 2D grid to fit the window\n    const rows = Math.ceil(windowHeight / boxSize);\n    const cols = Math.ceil(windowWidth / boxSize);\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        const cube = new THREE.Mesh(geometry, material);\n        cube.position.set(\n          (i - rows / 2) * boxSize,\n          (j - cols / 2) * boxSize,\n          0 // Z-plane for 2D effect\n        );\n        scene.add(cube);\n      }\n    }\n\n    camera.position.z = boxSize * 1.5; // Adjust camera position\n\n    // Animate the scene\n    function animate() {\n      requestAnimationFrame(animate);\n\n      scene.children.forEach((cube) => {\n        cube.rotation.x += 0.01;\n        cube.rotation.y += 0.01;\n      });\n\n      renderer.render(scene, camera);\n    }\n\n    animate();\n\n    // Handle window resize\n    window.addEventListener('resize', () => {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n    });\n\n    return () => {\n      document.body.removeChild(renderer.domElement);\n    };\n  }, []);\n\n  return null;\n};\n\nexport default FullScreenGridBoxes;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}