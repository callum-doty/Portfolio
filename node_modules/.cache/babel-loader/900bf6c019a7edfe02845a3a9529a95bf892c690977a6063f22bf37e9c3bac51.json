{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport * as THREE from 'three';\nconst FullScreenWaveUndulation = () => {\n  _s();\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n    const camera = new THREE.OrthographicCamera(window.innerWidth / -2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / -2, 1, 1000);\n    camera.position.z = 5;\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    const squareSize = 50;\n    const geometry = new THREE.PlaneGeometry(squareSize, squareSize);\n    const whiteMaterial = new THREE.MeshBasicMaterial({\n      color: 0xffffff,\n      side: THREE.DoubleSide\n    });\n    const blackMaterial = new THREE.MeshBasicMaterial({\n      color: 0x000000,\n      side: THREE.DoubleSide\n    });\n    const cols = Math.ceil(window.innerWidth / squareSize);\n    const rows = Math.ceil(window.innerHeight / squareSize);\n    const squares = [];\n    const diagonalGroups = {};\n    const invertedSquares = new Set(); // Track the inverted squares\n\n    // Create and place squares in a grid\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        const square = new THREE.Mesh(geometry, whiteMaterial);\n        square.position.set((j - cols / 2) * squareSize + squareSize / 2, (i - rows / 2) * squareSize + squareSize / 2, 0);\n        const diagonalKey = i - j; // Group by diagonal index (i - j creates unique indices for diagonal rows)\n\n        if (!diagonalGroups[diagonalKey]) {\n          diagonalGroups[diagonalKey] = {\n            squares: []\n          };\n        }\n        diagonalGroups[diagonalKey].squares.push(square);\n        scene.add(square);\n        squares.push({\n          mesh: square,\n          material: whiteMaterial,\n          inverted: false\n        }); // Track whether square is inverted\n      }\n    }\n\n    // Function to invert color for a square\n    const invertSquareColor = square => {\n      if (!square.inverted) {\n        square.mesh.material = blackMaterial;\n        square.inverted = true;\n        invertedSquares.add(square);\n      }\n    };\n\n    // Function to reset color back to white\n    const resetSquareColor = square => {\n      if (square.inverted) {\n        square.mesh.material = whiteMaterial;\n        square.inverted = false;\n        invertedSquares.delete(square);\n      }\n    };\n\n    // Detect mouse movement and invert color for squares around the mouse\n    const onMouseMove = event => {\n      const mouseX = event.clientX - window.innerWidth / 2;\n      const mouseY = -(event.clientY - window.innerHeight / 2);\n\n      // Calculate which column and row the mouse is over\n      const col = Math.floor((mouseX + cols * squareSize / 2) / squareSize);\n      const row = Math.floor((mouseY + rows * squareSize / 2) / squareSize);\n\n      // Reset all previously inverted squares\n      invertedSquares.forEach(resetSquareColor);\n\n      // Invert color for the 2x2 block of squares\n      for (let i = row - 1; i <= row; i++) {\n        for (let j = col - 1; j <= col; j++) {\n          if (i >= 0 && i < rows && j >= 0 && j < cols) {\n            const squareIndex = i * cols + j;\n            invertSquareColor(squares[squareIndex]);\n          }\n        }\n      }\n    };\n    document.addEventListener('mousemove', onMouseMove);\n    function animate() {\n      requestAnimationFrame(animate);\n      const time = performance.now() * 0.0004; // Slower time to reduce wave speed\n\n      // Create a coordinated wave that propagates diagonally across the grid\n      for (const key in diagonalGroups) {\n        const {\n          squares\n        } = diagonalGroups[key];\n        const wavePhase = key * 0.15; // Slightly increase the phase offset for smoother transitions\n\n        // Updated scaling factor to allow shrinking to zero and limit maximum size to avoid touching\n        const scaleFactor = Math.abs(Math.sin(time + wavePhase)) * 0.9 + 0.01; // Scale between 0.2 and 0.9\n\n        squares.forEach(square => {\n          square.scale.set(scaleFactor, scaleFactor, 1);\n        });\n      }\n      renderer.render(scene, camera);\n    }\n    animate();\n    window.addEventListener('resize', () => {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.left = window.innerWidth / -2;\n      camera.right = window.innerWidth / 2;\n      camera.top = window.innerHeight / 2;\n      camera.bottom = window.innerHeight / -2;\n      camera.updateProjectionMatrix();\n    });\n    return () => {\n      document.removeEventListener('mousemove', onMouseMove);\n      document.body.removeChild(renderer.domElement);\n    };\n  }, []);\n  return null;\n};\n_s(FullScreenWaveUndulation, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = FullScreenWaveUndulation;\nexport default FullScreenWaveUndulation;\nvar _c;\n$RefreshReg$(_c, \"FullScreenWaveUndulation\");","map":{"version":3,"names":["React","useEffect","THREE","FullScreenWaveUndulation","_s","scene","Scene","background","Color","camera","OrthographicCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","setSize","document","body","appendChild","domElement","squareSize","geometry","PlaneGeometry","whiteMaterial","MeshBasicMaterial","color","side","DoubleSide","blackMaterial","cols","Math","ceil","rows","squares","diagonalGroups","invertedSquares","Set","i","j","square","Mesh","set","diagonalKey","push","add","mesh","material","inverted","invertSquareColor","resetSquareColor","delete","onMouseMove","event","mouseX","clientX","mouseY","clientY","col","floor","row","forEach","squareIndex","addEventListener","animate","requestAnimationFrame","time","performance","now","key","wavePhase","scaleFactor","abs","sin","scale","render","left","right","top","bottom","updateProjectionMatrix","removeEventListener","removeChild","_c","$RefreshReg$"],"sources":["/Users/callumd/Desktop/Tech901-WebDev/website/src/pages/Home.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport * as THREE from 'three';\n\nconst FullScreenWaveUndulation = () => {\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n\n    const camera = new THREE.OrthographicCamera(\n      window.innerWidth / -2,\n      window.innerWidth / 2,\n      window.innerHeight / 2,\n      window.innerHeight / -2,\n      1,\n      1000\n    );\n    camera.position.z = 5;\n\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n\n    const squareSize = 50;\n    const geometry = new THREE.PlaneGeometry(squareSize, squareSize);\n    const whiteMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff, side: THREE.DoubleSide });\n    const blackMaterial = new THREE.MeshBasicMaterial({ color: 0x000000, side: THREE.DoubleSide });\n\n    const cols = Math.ceil(window.innerWidth / squareSize);\n    const rows = Math.ceil(window.innerHeight / squareSize);\n\n    const squares = [];\n    const diagonalGroups = {};\n    const invertedSquares = new Set(); // Track the inverted squares\n\n    // Create and place squares in a grid\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        const square = new THREE.Mesh(geometry, whiteMaterial);\n        square.position.set(\n          (j - cols / 2) * squareSize + squareSize / 2,\n          (i - rows / 2) * squareSize + squareSize / 2,\n          0\n        );\n\n        const diagonalKey = i - j; // Group by diagonal index (i - j creates unique indices for diagonal rows)\n\n        if (!diagonalGroups[diagonalKey]) {\n          diagonalGroups[diagonalKey] = {\n            squares: [],\n          };\n        }\n\n        diagonalGroups[diagonalKey].squares.push(square);\n        scene.add(square);\n        squares.push({ mesh: square, material: whiteMaterial, inverted: false }); // Track whether square is inverted\n      }\n    }\n\n    // Function to invert color for a square\n    const invertSquareColor = (square) => {\n      if (!square.inverted) {\n        square.mesh.material = blackMaterial;\n        square.inverted = true;\n        invertedSquares.add(square);\n      }\n    };\n\n    // Function to reset color back to white\n    const resetSquareColor = (square) => {\n      if (square.inverted) {\n        square.mesh.material = whiteMaterial;\n        square.inverted = false;\n        invertedSquares.delete(square);\n      }\n    };\n\n    // Detect mouse movement and invert color for squares around the mouse\n    const onMouseMove = (event) => {\n      const mouseX = event.clientX - window.innerWidth / 2;\n      const mouseY = -(event.clientY - window.innerHeight / 2);\n\n      // Calculate which column and row the mouse is over\n      const col = Math.floor((mouseX + cols * squareSize / 2) / squareSize);\n      const row = Math.floor((mouseY + rows * squareSize / 2) / squareSize);\n\n      // Reset all previously inverted squares\n      invertedSquares.forEach(resetSquareColor);\n\n      // Invert color for the 2x2 block of squares\n      for (let i = row - 1; i <= row; i++) {\n        for (let j = col - 1; j <= col; j++) {\n          if (i >= 0 && i < rows && j >= 0 && j < cols) {\n            const squareIndex = i * cols + j;\n            invertSquareColor(squares[squareIndex]);\n          }\n        }\n      }\n    };\n\n    document.addEventListener('mousemove', onMouseMove);\n\n    function animate() {\n      requestAnimationFrame(animate);\n\n      const time = performance.now() * 0.0004; // Slower time to reduce wave speed\n\n      // Create a coordinated wave that propagates diagonally across the grid\n      for (const key in diagonalGroups) {\n        const { squares } = diagonalGroups[key];\n        const wavePhase = key * 0.15; // Slightly increase the phase offset for smoother transitions\n\n        // Updated scaling factor to allow shrinking to zero and limit maximum size to avoid touching\n        const scaleFactor = Math.abs(Math.sin(time + wavePhase)) * 0.9 + 0.01; // Scale between 0.2 and 0.9\n\n        squares.forEach((square) => {\n          square.scale.set(scaleFactor, scaleFactor, 1);\n        });\n      }\n\n      renderer.render(scene, camera);\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.left = window.innerWidth / -2;\n      camera.right = window.innerWidth / 2;\n      camera.top = window.innerHeight / 2;\n      camera.bottom = window.innerHeight / -2;\n      camera.updateProjectionMatrix();\n    });\n\n    return () => {\n      document.removeEventListener('mousemove', onMouseMove);\n      document.body.removeChild(renderer.domElement);\n    };\n  }, []);\n\n  return null;\n};\n\nexport default FullScreenWaveUndulation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}