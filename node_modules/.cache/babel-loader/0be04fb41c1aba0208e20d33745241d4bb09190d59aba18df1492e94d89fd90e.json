{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport * as THREE from 'three';\nconst FullScreenWaveUndulation = () => {\n  _s();\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n    const camera = new THREE.OrthographicCamera(window.innerWidth / -2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / -2, 1, 1000);\n    camera.position.z = 5;\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    const squareSize = 50;\n    const geometry = new THREE.PlaneGeometry(squareSize, squareSize);\n    const material = new THREE.MeshBasicMaterial({\n      color: 0xffffff,\n      side: THREE.DoubleSide\n    });\n    const cols = Math.ceil(window.innerWidth / squareSize);\n    const rows = Math.ceil(window.innerHeight / squareSize);\n    const squares = [];\n    const diagonalGroups = {};\n\n    // Create and place squares in a grid\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        const square = new THREE.Mesh(geometry, material);\n        square.position.set((j - cols / 2) * squareSize + squareSize / 2, (i - rows / 2) * squareSize + squareSize / 2, 0);\n        const diagonalKey = i - j; // Group by diagonal index (i - j creates unique indices for diagonal rows)\n\n        if (!diagonalGroups[diagonalKey]) {\n          diagonalGroups[diagonalKey] = {\n            squares: []\n          };\n        }\n        diagonalGroups[diagonalKey].squares.push(square);\n        scene.add(square);\n        squares.push(square);\n      }\n    }\n    function animate() {\n      requestAnimationFrame(animate);\n      const time = performance.now() * 0.0007; // Time in seconds\n\n      // Create a coordinated wave that propagates diagonally across the grid\n      for (const key in diagonalGroups) {\n        const {\n          squares\n        } = diagonalGroups[key];\n        const wavePhase = key * 0.13; // Adjust phase to create the wave effect\n\n        // Updated scaling factor to allow shrinking to zero\n        const scaleFactor = Math.abs(Math.sin(time + wavePhase)) * 1; // Scale between 0 and 1\n\n        squares.forEach(square => {\n          square.scale.set(scaleFactor, scaleFactor, 1);\n        });\n      }\n      renderer.render(scene, camera);\n    }\n    animate();\n    window.addEventListener('resize', () => {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.left = window.innerWidth / -2;\n      camera.right = window.innerWidth / 2;\n      camera.top = window.innerHeight / 2;\n      camera.bottom = window.innerHeight / -2;\n      camera.updateProjectionMatrix();\n    });\n    return () => {\n      document.body.removeChild(renderer.domElement);\n    };\n  }, []);\n  return null;\n};\n_s(FullScreenWaveUndulation, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = FullScreenWaveUndulation;\nexport default FullScreenWaveUndulation;\nvar _c;\n$RefreshReg$(_c, \"FullScreenWaveUndulation\");","map":{"version":3,"names":["React","useEffect","THREE","FullScreenWaveUndulation","_s","scene","Scene","background","Color","camera","OrthographicCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","setSize","document","body","appendChild","domElement","squareSize","geometry","PlaneGeometry","material","MeshBasicMaterial","color","side","DoubleSide","cols","Math","ceil","rows","squares","diagonalGroups","i","j","square","Mesh","set","diagonalKey","push","add","animate","requestAnimationFrame","time","performance","now","key","wavePhase","scaleFactor","abs","sin","forEach","scale","render","addEventListener","left","right","top","bottom","updateProjectionMatrix","removeChild","_c","$RefreshReg$"],"sources":["/Users/callumd/Desktop/Tech901-WebDev/website/src/pages/Home.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport * as THREE from 'three';\n\nconst FullScreenWaveUndulation = () => {\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n\n    const camera = new THREE.OrthographicCamera(\n      window.innerWidth / -2,\n      window.innerWidth / 2,\n      window.innerHeight / 2,\n      window.innerHeight / -2,\n      1,\n      1000\n    );\n    camera.position.z = 5;\n\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n\n    const squareSize = 50;\n    const geometry = new THREE.PlaneGeometry(squareSize, squareSize);\n    const material = new THREE.MeshBasicMaterial({ color: 0xffffff, side: THREE.DoubleSide });\n\n    const cols = Math.ceil(window.innerWidth / squareSize);\n    const rows = Math.ceil(window.innerHeight / squareSize);\n\n    const squares = [];\n    const diagonalGroups = {};\n\n    // Create and place squares in a grid\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        const square = new THREE.Mesh(geometry, material);\n        square.position.set(\n          (j - cols / 2) * squareSize + squareSize / 2,\n          (i - rows / 2) * squareSize + squareSize / 2,\n          0\n        );\n\n        const diagonalKey = i - j; // Group by diagonal index (i - j creates unique indices for diagonal rows)\n\n        if (!diagonalGroups[diagonalKey]) {\n          diagonalGroups[diagonalKey] = {\n            squares: [],\n          };\n        }\n\n        diagonalGroups[diagonalKey].squares.push(square);\n        scene.add(square);\n        squares.push(square);\n      }\n    }\n\n    function animate() {\n      requestAnimationFrame(animate);\n    \n      const time = performance.now() * 0.0007; // Time in seconds\n    \n      // Create a coordinated wave that propagates diagonally across the grid\n      for (const key in diagonalGroups) {\n        const { squares } = diagonalGroups[key];\n        const wavePhase = key * 0.13; // Adjust phase to create the wave effect\n    \n        // Updated scaling factor to allow shrinking to zero\n        const scaleFactor = Math.abs(Math.sin(time + wavePhase)) * 1; // Scale between 0 and 1\n    \n        squares.forEach((square) => {\n          square.scale.set(scaleFactor, scaleFactor, 1);\n        });\n      }\n    \n      renderer.render(scene, camera);\n    }\n    \n    animate();\n\n    window.addEventListener('resize', () => {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.left = window.innerWidth / -2;\n      camera.right = window.innerWidth / 2;\n      camera.top = window.innerHeight / 2;\n      camera.bottom = window.innerHeight / -2;\n      camera.updateProjectionMatrix();\n    });\n\n    return () => {\n      document.body.removeChild(renderer.domElement);\n    };\n  }, []);\n\n  return null;\n};\n\nexport default FullScreenWaveUndulation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}