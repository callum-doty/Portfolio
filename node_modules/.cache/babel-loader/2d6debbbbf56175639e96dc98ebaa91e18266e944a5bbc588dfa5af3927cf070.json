{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport * as THREE from 'three';\nconst FullScreenWaveUndulation = () => {\n  _s();\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n    const camera = new THREE.OrthographicCamera(window.innerWidth / -2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / -2, 1, 1000);\n    camera.position.z = 5;\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    const squareSize = 50;\n    const geometry = new THREE.PlaneGeometry(squareSize, squareSize);\n    const whiteMaterial = new THREE.MeshBasicMaterial({\n      color: 0xffffff,\n      side: THREE.DoubleSide\n    });\n    const cols = Math.ceil(window.innerWidth / squareSize);\n    const rows = Math.ceil(window.innerHeight / squareSize);\n    const squares = [];\n    const diagonalGroups = {};\n\n    // Create and place only white squares in a grid\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        // White square\n        const whiteSquare = new THREE.Mesh(geometry, whiteMaterial);\n        whiteSquare.position.set((j - cols / 2) * squareSize + squareSize / 2, (i - rows / 2) * squareSize + squareSize / 2, 0);\n        const diagonalKey = i - j; // Group by diagonal index (i - j creates unique indices for diagonal rows)\n\n        if (!diagonalGroups[diagonalKey]) {\n          diagonalGroups[diagonalKey] = {\n            squares: []\n          };\n        }\n        diagonalGroups[diagonalKey].squares.push({\n          whiteSquare\n        });\n        scene.add(whiteSquare);\n        squares.push({\n          whiteSquare\n        });\n      }\n    }\n\n    // Detect mouse movement and expand white squares to 0.9 on hover\n    const onMouseMove = event => {\n      const mouseX = event.clientX - window.innerWidth / 2;\n      const mouseY = -(event.clientY - window.innerHeight / 2);\n\n      // Calculate which column and row the mouse is over\n      const col = Math.floor((mouseX + cols * squareSize / 2) / squareSize);\n      const row = Math.floor((mouseY + rows * squareSize / 2) / squareSize);\n      if (row >= 0 && row < rows && col >= 0 && col < cols) {\n        const squareIndex = row * cols + col;\n        const {\n          whiteSquare\n        } = squares[squareIndex];\n\n        // Scale the white square to 0.9 on hover\n        whiteSquare.scale.set(0.9, 0.9, 1); // Fully expand the white square\n\n        // Revert all other squares to their default size based on the wave animation\n        squares.forEach(({\n          whiteSquare: ws\n        }, index) => {\n          if (index !== squareIndex) {\n            const time = performance.now() * 0.0004;\n            const diagonalKey = Math.floor(index / cols) - index % cols;\n            const wavePhase = diagonalKey * 0.15;\n            const defaultWhiteScale = Math.abs(Math.sin(time + wavePhase)) * 0.6 + 0.01;\n            ws.scale.set(defaultWhiteScale, defaultWhiteScale, 1);\n          }\n        });\n      }\n    };\n    document.addEventListener('mousemove', onMouseMove);\n    function animate() {\n      requestAnimationFrame(animate);\n      const time = performance.now() * 0.0004; // Slower time to reduce wave speed\n\n      // Create a coordinated wave that propagates diagonally across the grid\n      for (const key in diagonalGroups) {\n        const {\n          squares\n        } = diagonalGroups[key];\n        const wavePhase = key * 0.15; // Slightly increase the phase offset for smoother transitions\n\n        squares.forEach(({\n          whiteSquare\n        }) => {\n          const whiteScaleFactor = Math.abs(Math.sin(time + wavePhase)) * 0.6 + 0.01; // Shrinking white squares\n\n          // Apply scaling only if the square isn't being hovered over\n          if (whiteSquare.scale.x !== 0.9) {\n            // If it's not already expanded\n            whiteSquare.scale.set(whiteScaleFactor, whiteScaleFactor, 1);\n          }\n        });\n      }\n      renderer.render(scene, camera);\n    }\n    animate();\n    window.addEventListener('resize', () => {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.left = window.innerWidth / -2;\n      camera.right = window.innerWidth / 2;\n      camera.top = window.innerHeight / 2;\n      camera.bottom = window.innerHeight / -2;\n      camera.updateProjectionMatrix();\n    });\n    return () => {\n      document.removeEventListener('mousemove', onMouseMove);\n      document.body.removeChild(renderer.domElement);\n    };\n  }, []);\n  return null;\n};\n_s(FullScreenWaveUndulation, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = FullScreenWaveUndulation;\nexport default FullScreenWaveUndulation;\nvar _c;\n$RefreshReg$(_c, \"FullScreenWaveUndulation\");","map":{"version":3,"names":["React","useEffect","THREE","FullScreenWaveUndulation","_s","scene","Scene","background","Color","camera","OrthographicCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","setSize","document","body","appendChild","domElement","squareSize","geometry","PlaneGeometry","whiteMaterial","MeshBasicMaterial","color","side","DoubleSide","cols","Math","ceil","rows","squares","diagonalGroups","i","j","whiteSquare","Mesh","set","diagonalKey","push","add","onMouseMove","event","mouseX","clientX","mouseY","clientY","col","floor","row","squareIndex","scale","forEach","ws","index","time","performance","now","wavePhase","defaultWhiteScale","abs","sin","addEventListener","animate","requestAnimationFrame","key","whiteScaleFactor","x","render","left","right","top","bottom","updateProjectionMatrix","removeEventListener","removeChild","_c","$RefreshReg$"],"sources":["/Users/callumd/Desktop/Tech901-WebDev/website/src/pages/Home.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport * as THREE from 'three';\n\nconst FullScreenWaveUndulation = () => {\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n\n    const camera = new THREE.OrthographicCamera(\n      window.innerWidth / -2,\n      window.innerWidth / 2,\n      window.innerHeight / 2,\n      window.innerHeight / -2,\n      1,\n      1000\n    );\n    camera.position.z = 5;\n\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n\n    const squareSize = 50;\n    const geometry = new THREE.PlaneGeometry(squareSize, squareSize);\n    const whiteMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff, side: THREE.DoubleSide });\n\n    const cols = Math.ceil(window.innerWidth / squareSize);\n    const rows = Math.ceil(window.innerHeight / squareSize);\n\n    const squares = [];\n    const diagonalGroups = {};\n\n    // Create and place only white squares in a grid\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        // White square\n        const whiteSquare = new THREE.Mesh(geometry, whiteMaterial);\n        whiteSquare.position.set(\n          (j - cols / 2) * squareSize + squareSize / 2,\n          (i - rows / 2) * squareSize + squareSize / 2,\n          0\n        );\n\n        const diagonalKey = i - j; // Group by diagonal index (i - j creates unique indices for diagonal rows)\n\n        if (!diagonalGroups[diagonalKey]) {\n          diagonalGroups[diagonalKey] = {\n            squares: [],\n          };\n        }\n\n        diagonalGroups[diagonalKey].squares.push({ whiteSquare });\n        scene.add(whiteSquare);\n        squares.push({ whiteSquare });\n      }\n    }\n\n    // Detect mouse movement and expand white squares to 0.9 on hover\n    const onMouseMove = (event) => {\n      const mouseX = event.clientX - window.innerWidth / 2;\n      const mouseY = -(event.clientY - window.innerHeight / 2);\n\n      // Calculate which column and row the mouse is over\n      const col = Math.floor((mouseX + cols * squareSize / 2) / squareSize);\n      const row = Math.floor((mouseY + rows * squareSize / 2) / squareSize);\n\n      if (row >= 0 && row < rows && col >= 0 && col < cols) {\n        const squareIndex = row * cols + col;\n        const { whiteSquare } = squares[squareIndex];\n\n        // Scale the white square to 0.9 on hover\n        whiteSquare.scale.set(0.9, 0.9, 1); // Fully expand the white square\n\n        // Revert all other squares to their default size based on the wave animation\n        squares.forEach(({ whiteSquare: ws }, index) => {\n          if (index !== squareIndex) {\n            const time = performance.now() * 0.0004;\n            const diagonalKey = Math.floor(index / cols) - (index % cols);\n            const wavePhase = diagonalKey * 0.15;\n            const defaultWhiteScale = Math.abs(Math.sin(time + wavePhase)) * 0.6 + 0.01;\n            ws.scale.set(defaultWhiteScale, defaultWhiteScale, 1);\n          }\n        });\n      }\n    };\n\n    document.addEventListener('mousemove', onMouseMove);\n\n    function animate() {\n      requestAnimationFrame(animate);\n\n      const time = performance.now() * 0.0004; // Slower time to reduce wave speed\n\n      // Create a coordinated wave that propagates diagonally across the grid\n      for (const key in diagonalGroups) {\n        const { squares } = diagonalGroups[key];\n        const wavePhase = key * 0.15; // Slightly increase the phase offset for smoother transitions\n\n        squares.forEach(({ whiteSquare }) => {\n          const whiteScaleFactor = Math.abs(Math.sin(time + wavePhase)) * 0.6 + 0.01; // Shrinking white squares\n\n          // Apply scaling only if the square isn't being hovered over\n          if (whiteSquare.scale.x !== 0.9) { // If it's not already expanded\n            whiteSquare.scale.set(whiteScaleFactor, whiteScaleFactor, 1);\n          }\n        });\n      }\n\n      renderer.render(scene, camera);\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.left = window.innerWidth / -2;\n      camera.right = window.innerWidth / 2;\n      camera.top = window.innerHeight / 2;\n      camera.bottom = window.innerHeight / -2;\n      camera.updateProjectionMatrix();\n    });\n\n    return () => {\n      document.removeEventListener('mousemove', onMouseMove);\n      document.body.removeChild(renderer.domElement);\n    };\n  }, []);\n\n  return null;\n};\n\nexport default FullScreenWaveUndulation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}