{"ast":null,"code":"var _jsxFileName = \"/Users/callumd/Desktop/Tech901-WebDev/website/src/pages/Home.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UndulatingEffect = () => {\n  _s();\n  useEffect(() => {\n    // Set up scene, camera, and renderer\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n\n    // Create the plane geometry and shader material\n    const geometry = new THREE.PlaneGeometry(2, 2);\n\n    // Shader material with updated vertex and fragment shaders for grid effect\n    const material = new THREE.ShaderMaterial({\n      uniforms: {\n        u_time: {\n          value: 0.0\n        },\n        u_resolution: {\n          value: new THREE.Vector2(window.innerWidth, window.innerHeight)\n        }\n      },\n      vertexShader: `\n        void main() {\n          gl_Position = vec4(position, 1.0);\n        }\n      `,\n      fragmentShader: `\n        uniform float u_time;\n        uniform vec2 u_resolution;\n\n        float drawSquare(vec2 st, float size) {\n          // Create a square shape based on coordinates\n          vec2 s = smoothstep(vec2(0.0), vec2(size), st) * smoothstep(vec2(0.0), vec2(size), vec2(1.0) - st);\n          return s.x * s.y;\n        }\n\n        void main() {\n          vec2 st = gl_FragCoord.xy / u_resolution.xy;\n\n          // Rotate the grid for the diagonal effect\n          st = mat2(cos(0.5), -sin(0.5), sin(0.5), cos(0.5)) * (st - 0.5) + 0.5;\n\n          // Adjust the scale of squares based on distance from the center\n          float scale = 20.0 * (sin(st.x * 10.0 + u_time) * cos(st.y * 10.0 + u_time));\n          \n          // Position of the grid based on fragment coordinates\n          vec2 grid = fract(st * scale);\n\n          // Draw squares with a size based on the wave pattern\n          float square = drawSquare(grid, 0.5);\n\n          // Color the squares black or white\n          vec3 color = vec3(1.0 - square);\n\n          gl_FragColor = vec4(color, 1.0);\n        }\n      `,\n      side: THREE.DoubleSide\n    });\n    const plane = new THREE.Mesh(geometry, material);\n    scene.add(plane);\n    camera.position.z = 1;\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      material.uniforms.u_time.value += 0.05;\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Handle window resizing\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      material.uniforms.u_resolution.value.set(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup when component unmounts\n    return () => {\n      document.body.removeChild(renderer.domElement);\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 10\n  }, this);\n};\n_s(UndulatingEffect, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = UndulatingEffect;\nexport default UndulatingEffect;\nvar _c;\n$RefreshReg$(_c, \"UndulatingEffect\");","map":{"version":3,"names":["React","useEffect","THREE","jsxDEV","_jsxDEV","UndulatingEffect","_s","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","setSize","document","body","appendChild","domElement","geometry","PlaneGeometry","material","ShaderMaterial","uniforms","u_time","value","u_resolution","Vector2","vertexShader","fragmentShader","side","DoubleSide","plane","Mesh","add","position","z","animate","requestAnimationFrame","render","handleResize","aspect","updateProjectionMatrix","set","addEventListener","removeChild","removeEventListener","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/callumd/Desktop/Tech901-WebDev/website/src/pages/Home.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport * as THREE from 'three';\n\nconst UndulatingEffect = () => {\n  useEffect(() => {\n    // Set up scene, camera, and renderer\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n\n    // Create the plane geometry and shader material\n    const geometry = new THREE.PlaneGeometry(2, 2);\n\n    // Shader material with updated vertex and fragment shaders for grid effect\n    const material = new THREE.ShaderMaterial({\n      uniforms: {\n        u_time: { value: 0.0 },\n        u_resolution: { value: new THREE.Vector2(window.innerWidth, window.innerHeight) }\n      },\n      vertexShader: `\n        void main() {\n          gl_Position = vec4(position, 1.0);\n        }\n      `,\n      fragmentShader: `\n        uniform float u_time;\n        uniform vec2 u_resolution;\n\n        float drawSquare(vec2 st, float size) {\n          // Create a square shape based on coordinates\n          vec2 s = smoothstep(vec2(0.0), vec2(size), st) * smoothstep(vec2(0.0), vec2(size), vec2(1.0) - st);\n          return s.x * s.y;\n        }\n\n        void main() {\n          vec2 st = gl_FragCoord.xy / u_resolution.xy;\n\n          // Rotate the grid for the diagonal effect\n          st = mat2(cos(0.5), -sin(0.5), sin(0.5), cos(0.5)) * (st - 0.5) + 0.5;\n\n          // Adjust the scale of squares based on distance from the center\n          float scale = 20.0 * (sin(st.x * 10.0 + u_time) * cos(st.y * 10.0 + u_time));\n          \n          // Position of the grid based on fragment coordinates\n          vec2 grid = fract(st * scale);\n\n          // Draw squares with a size based on the wave pattern\n          float square = drawSquare(grid, 0.5);\n\n          // Color the squares black or white\n          vec3 color = vec3(1.0 - square);\n\n          gl_FragColor = vec4(color, 1.0);\n        }\n      `,\n      side: THREE.DoubleSide,\n    });\n\n    const plane = new THREE.Mesh(geometry, material);\n    scene.add(plane);\n    camera.position.z = 1;\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      material.uniforms.u_time.value += 0.05;\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Handle window resizing\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      material.uniforms.u_resolution.value.set(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup when component unmounts\n    return () => {\n      document.body.removeChild(renderer.domElement);\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return <div />;\n};\n\nexport default UndulatingEffect;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7BL,SAAS,CAAC,MAAM;IACd;IACA,MAAMM,KAAK,GAAG,IAAIL,KAAK,CAACM,KAAK,CAAC,CAAC;IAC/B,MAAMC,MAAM,GAAG,IAAIP,KAAK,CAACQ,iBAAiB,CAAC,EAAE,EAAEC,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW,EAAE,GAAG,EAAE,IAAI,CAAC;IACjG,MAAMC,QAAQ,GAAG,IAAIZ,KAAK,CAACa,aAAa,CAAC;MAAEC,SAAS,EAAE;IAAK,CAAC,CAAC;IAC7DF,QAAQ,CAACG,OAAO,CAACN,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;IACvDK,QAAQ,CAACC,IAAI,CAACC,WAAW,CAACN,QAAQ,CAACO,UAAU,CAAC;;IAE9C;IACA,MAAMC,QAAQ,GAAG,IAAIpB,KAAK,CAACqB,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC;;IAE9C;IACA,MAAMC,QAAQ,GAAG,IAAItB,KAAK,CAACuB,cAAc,CAAC;MACxCC,QAAQ,EAAE;QACRC,MAAM,EAAE;UAAEC,KAAK,EAAE;QAAI,CAAC;QACtBC,YAAY,EAAE;UAAED,KAAK,EAAE,IAAI1B,KAAK,CAAC4B,OAAO,CAACnB,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW;QAAE;MAClF,CAAC;MACDkB,YAAY,EAAE;AACpB;AACA;AACA;AACA,OAAO;MACDC,cAAc,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;MACDC,IAAI,EAAE/B,KAAK,CAACgC;IACd,CAAC,CAAC;IAEF,MAAMC,KAAK,GAAG,IAAIjC,KAAK,CAACkC,IAAI,CAACd,QAAQ,EAAEE,QAAQ,CAAC;IAChDjB,KAAK,CAAC8B,GAAG,CAACF,KAAK,CAAC;IAChB1B,MAAM,CAAC6B,QAAQ,CAACC,CAAC,GAAG,CAAC;;IAErB;IACA,MAAMC,OAAO,GAAGA,CAAA,KAAM;MACpBC,qBAAqB,CAACD,OAAO,CAAC;MAC9BhB,QAAQ,CAACE,QAAQ,CAACC,MAAM,CAACC,KAAK,IAAI,IAAI;MACtCd,QAAQ,CAAC4B,MAAM,CAACnC,KAAK,EAAEE,MAAM,CAAC;IAChC,CAAC;IACD+B,OAAO,CAAC,CAAC;;IAET;IACA,MAAMG,YAAY,GAAGA,CAAA,KAAM;MACzBlC,MAAM,CAACmC,MAAM,GAAGjC,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW;MACtDJ,MAAM,CAACoC,sBAAsB,CAAC,CAAC;MAC/B/B,QAAQ,CAACG,OAAO,CAACN,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;MACvDW,QAAQ,CAACE,QAAQ,CAACG,YAAY,CAACD,KAAK,CAACkB,GAAG,CAACnC,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;IACjF,CAAC;IACDF,MAAM,CAACoC,gBAAgB,CAAC,QAAQ,EAAEJ,YAAY,CAAC;;IAE/C;IACA,OAAO,MAAM;MACXzB,QAAQ,CAACC,IAAI,CAAC6B,WAAW,CAAClC,QAAQ,CAACO,UAAU,CAAC;MAC9CV,MAAM,CAACsC,mBAAmB,CAAC,QAAQ,EAAEN,YAAY,CAAC;IACpD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOvC,OAAA;IAAA8C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AAChB,CAAC;AAAC/C,EAAA,CAtFID,gBAAgB;AAAAiD,EAAA,GAAhBjD,gBAAgB;AAwFtB,eAAeA,gBAAgB;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}