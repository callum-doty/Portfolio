{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport * as THREE from 'three';\nconst FullScreenWaveUndulation = () => {\n  _s();\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n    const camera = new THREE.OrthographicCamera(window.innerWidth / -2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / -2, 1, 1000);\n    camera.position.z = 5;\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    const squareSize = 35; // Square size\n    const geometry = new THREE.PlaneGeometry(squareSize, squareSize);\n    const whiteMaterial = new THREE.MeshBasicMaterial({\n      color: 0xffffff,\n      side: THREE.DoubleSide\n    });\n    const cols = Math.ceil(window.innerWidth / squareSize);\n    const rows = Math.ceil(window.innerHeight / squareSize);\n    const squares = [];\n    const diagonalGroups = {};\n\n    // Create and place only white squares in a grid\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        // White square\n        const whiteSquare = new THREE.Mesh(geometry, whiteMaterial);\n        whiteSquare.position.set((j - cols / 2) * squareSize + squareSize / 2, (i - rows / 2) * squareSize + squareSize / 2, 0);\n\n        // Add hover state and animation properties\n        whiteSquare.userData.targetScale = 0.6; // Default scale\n        whiteSquare.userData.currentScale = 0.6;\n        whiteSquare.userData.isHovered = false;\n        const diagonalKey = i - j; // Group by diagonal index (i - j creates unique indices for diagonal rows)\n\n        if (!diagonalGroups[diagonalKey]) {\n          diagonalGroups[diagonalKey] = {\n            squares: []\n          };\n        }\n        diagonalGroups[diagonalKey].squares.push({\n          whiteSquare\n        });\n        scene.add(whiteSquare);\n        squares.push({\n          whiteSquare\n        });\n      }\n    }\n\n    // Smoothly interpolate between the current and target scale\n    const lerp = (start, end, t) => start * (1 - t) + end * t;\n\n    // Detect mouse movement and update target scale for hovered squares\n    const onMouseMove = event => {\n      const mouseX = event.clientX - window.innerWidth / 2;\n      const mouseY = -(event.clientY - window.innerHeight / 2);\n\n      // Calculate which column and row the mouse is over\n      const col = Math.floor((mouseX + cols * squareSize / 2) / squareSize);\n      const row = Math.floor((mouseY + rows * squareSize / 2) / squareSize);\n      if (row >= 0 && row < rows && col >= 0 && col < cols) {\n        // Set hover effect to nearby squares\n        for (let i = row - 2; i <= row + 1; i++) {\n          for (let j = col - 2; j <= col + 1; j++) {\n            if (i >= 0 && i < rows && j >= 0 && j < cols) {\n              const squareIndex = i * cols + j;\n              const {\n                whiteSquare\n              } = squares[squareIndex];\n\n              // Set the target scale to 0.9 (for the hover effect)\n              whiteSquare.userData.targetScale = 0.9;\n              whiteSquare.userData.isHovered = true;\n\n              // Reset back to original size after a delay\n              setTimeout(() => {\n                whiteSquare.userData.targetScale = 0.6;\n                whiteSquare.userData.isHovered = false;\n              }, 250);\n            }\n          }\n        }\n      }\n    };\n    document.addEventListener('mousemove', onMouseMove);\n    function animate() {\n      requestAnimationFrame(animate);\n      const time = performance.now() * 0.0001; // Slows down wave propagation\n      const waveFrequency = 0.05; // Increase this value to stretch the wave (increasing the time between waves)\n\n      // Create a coordinated wave across the grid\n      for (const key in diagonalGroups) {\n        const {\n          squares\n        } = diagonalGroups[key];\n        const wavePhase = key * 0.15; // Use this to create the phase offset between diagonals\n\n        squares.forEach(({\n          whiteSquare\n        }) => {\n          if (!whiteSquare.userData.isHovered) {\n            // Apply slower wave by modifying the frequency\n            const waveScale = Math.abs(Math.sin(time * waveFrequency + wavePhase)) * 0.6 + 0.01;\n            whiteSquare.userData.targetScale = waveScale;\n          }\n\n          // Smooth interpolation between current and target scale\n          whiteSquare.userData.currentScale = lerp(whiteSquare.userData.currentScale, whiteSquare.userData.targetScale, 0.1 // Smoothing factor\n          );\n\n          // Apply the current scale\n          whiteSquare.scale.set(whiteSquare.userData.currentScale, whiteSquare.userData.currentScale, 1);\n        });\n      }\n      renderer.render(scene, camera);\n    }\n    animate();\n    window.addEventListener('resize', () => {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.left = window.innerWidth / -2;\n      camera.right = window.innerWidth / 2;\n      camera.top = window.innerHeight / 2;\n      camera.bottom = window.innerHeight / -2;\n      camera.updateProjectionMatrix();\n    });\n    return () => {\n      document.removeEventListener('mousemove', onMouseMove);\n      document.body.removeChild(renderer.domElement);\n    };\n  }, []);\n  return null;\n};\n_s(FullScreenWaveUndulation, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = FullScreenWaveUndulation;\nexport default FullScreenWaveUndulation;\nvar _c;\n$RefreshReg$(_c, \"FullScreenWaveUndulation\");","map":{"version":3,"names":["React","useEffect","THREE","FullScreenWaveUndulation","_s","scene","Scene","background","Color","camera","OrthographicCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","setSize","document","body","appendChild","domElement","squareSize","geometry","PlaneGeometry","whiteMaterial","MeshBasicMaterial","color","side","DoubleSide","cols","Math","ceil","rows","squares","diagonalGroups","i","j","whiteSquare","Mesh","set","userData","targetScale","currentScale","isHovered","diagonalKey","push","add","lerp","start","end","t","onMouseMove","event","mouseX","clientX","mouseY","clientY","col","floor","row","squareIndex","setTimeout","addEventListener","animate","requestAnimationFrame","time","performance","now","waveFrequency","key","wavePhase","forEach","waveScale","abs","sin","scale","render","left","right","top","bottom","updateProjectionMatrix","removeEventListener","removeChild","_c","$RefreshReg$"],"sources":["/Users/callumd/Desktop/Tech901-WebDev/website/src/pages/Home.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport * as THREE from 'three';\n\nconst FullScreenWaveUndulation = () => {\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n\n    const camera = new THREE.OrthographicCamera(\n      window.innerWidth / -2,\n      window.innerWidth / 2,\n      window.innerHeight / 2,\n      window.innerHeight / -2,\n      1,\n      1000\n    );\n    camera.position.z = 5;\n\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n\n    const squareSize = 35; // Square size\n    const geometry = new THREE.PlaneGeometry(squareSize, squareSize);\n    const whiteMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff, side: THREE.DoubleSide });\n\n    const cols = Math.ceil(window.innerWidth / squareSize);\n    const rows = Math.ceil(window.innerHeight / squareSize);\n\n    const squares = [];\n    const diagonalGroups = {};\n\n    // Create and place only white squares in a grid\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        // White square\n        const whiteSquare = new THREE.Mesh(geometry, whiteMaterial);\n        whiteSquare.position.set(\n          (j - cols / 2) * squareSize + squareSize / 2,\n          (i - rows / 2) * squareSize + squareSize / 2,\n          0\n        );\n\n        // Add hover state and animation properties\n        whiteSquare.userData.targetScale = 0.6; // Default scale\n        whiteSquare.userData.currentScale = 0.6;\n        whiteSquare.userData.isHovered = false;\n\n        const diagonalKey = i - j; // Group by diagonal index (i - j creates unique indices for diagonal rows)\n\n        if (!diagonalGroups[diagonalKey]) {\n          diagonalGroups[diagonalKey] = {\n            squares: [],\n          };\n        }\n\n        diagonalGroups[diagonalKey].squares.push({ whiteSquare });\n        scene.add(whiteSquare);\n        squares.push({ whiteSquare });\n      }\n    }\n\n    // Smoothly interpolate between the current and target scale\n    const lerp = (start, end, t) => start * (1 - t) + end * t;\n\n    // Detect mouse movement and update target scale for hovered squares\n    const onMouseMove = (event) => {\n      const mouseX = event.clientX - window.innerWidth / 2;\n      const mouseY = -(event.clientY - window.innerHeight / 2);\n\n      // Calculate which column and row the mouse is over\n      const col = Math.floor((mouseX + cols * squareSize / 2) / squareSize);\n      const row = Math.floor((mouseY + rows * squareSize / 2) / squareSize);\n\n      if (row >= 0 && row < rows && col >= 0 && col < cols) {\n        // Set hover effect to nearby squares\n        for (let i = row - 2; i <= row + 1; i++) {\n          for (let j = col - 2; j <= col + 1; j++) {\n            if (i >= 0 && i < rows && j >= 0 && j < cols) {\n              const squareIndex = i * cols + j;\n              const { whiteSquare } = squares[squareIndex];\n\n              // Set the target scale to 0.9 (for the hover effect)\n              whiteSquare.userData.targetScale = 0.9;\n              whiteSquare.userData.isHovered = true;\n\n              // Reset back to original size after a delay\n              setTimeout(() => {\n                whiteSquare.userData.targetScale = 0.6;\n                whiteSquare.userData.isHovered = false;\n              }, 250);\n            }\n          }\n        }\n      }\n    };\n\n    document.addEventListener('mousemove', onMouseMove);\n\n    function animate() {\n      requestAnimationFrame(animate);\n\n      const time = performance.now() * 0.0001; // Slows down wave propagation\n      const waveFrequency = 0.05; // Increase this value to stretch the wave (increasing the time between waves)\n\n      // Create a coordinated wave across the grid\n      for (const key in diagonalGroups) {\n        const { squares } = diagonalGroups[key];\n        const wavePhase = key * 0.15; // Use this to create the phase offset between diagonals\n\n        squares.forEach(({ whiteSquare }) => {\n          if (!whiteSquare.userData.isHovered) {\n            // Apply slower wave by modifying the frequency\n            const waveScale = Math.abs(Math.sin(time * waveFrequency + wavePhase)) * 0.6 + 0.01;\n            whiteSquare.userData.targetScale = waveScale;\n          }\n\n          // Smooth interpolation between current and target scale\n          whiteSquare.userData.currentScale = lerp(\n            whiteSquare.userData.currentScale,\n            whiteSquare.userData.targetScale,\n            0.1 // Smoothing factor\n          );\n\n          // Apply the current scale\n          whiteSquare.scale.set(\n            whiteSquare.userData.currentScale,\n            whiteSquare.userData.currentScale,\n            1\n          );\n        });\n      }\n\n      renderer.render(scene, camera);\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.left = window.innerWidth / -2;\n      camera.right = window.innerWidth / 2;\n      camera.top = window.innerHeight / 2;\n      camera.bottom = window.innerHeight / -2;\n      camera.updateProjectionMatrix();\n    });\n\n    return () => {\n      document.removeEventListener('mousemove', onMouseMove);\n      document.body.removeChild(renderer.domElement);\n    };\n  }, []);\n\n  return null;\n};\n\nexport default FullScreenWaveUndulation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}