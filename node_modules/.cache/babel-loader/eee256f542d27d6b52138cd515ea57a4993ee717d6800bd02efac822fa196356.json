{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport * as THREE from 'three';\nconst FullScreenSquaresRounded = () => {\n  _s();\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n    const camera = new THREE.OrthographicCamera(window.innerWidth / -2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / -2, 1, 1000);\n    camera.position.z = 5;\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    const squareSize = 50;\n    const geometry = new THREE.PlaneGeometry(squareSize, squareSize);\n\n    // Custom material with rounded corners using a shader\n    const material = new THREE.ShaderMaterial({\n      uniforms: {\n        u_color: {\n          value: new THREE.Color(0xffffff)\n        },\n        u_radius: {\n          value: 0.2\n        } // Controls the roundness of the corners\n      },\n      vertexShader: `\n        varying vec2 vUv;\n        void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      `,\n      fragmentShader: `\n        uniform vec3 u_color;\n        uniform float u_radius;\n        varying vec2 vUv;\n\n        void main() {\n          vec2 uv = vUv * 2.0 - 1.0; // normalize uv\n          float dist = length(uv); // Distance from center\n          float radius = smoothstep(1.0, 1.0 - u_radius, dist); // Rounded corner effect\n          gl_FragColor = vec4(u_color * radius, 1.0);\n        }\n      `\n    });\n    const cols = Math.ceil(window.innerWidth / squareSize);\n    const rows = Math.ceil(window.innerHeight / squareSize);\n    const squares = [];\n\n    // Create and place squares in the grid\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        const square = new THREE.Mesh(geometry, material);\n        square.position.set((j - cols / 2) * squareSize + squareSize / 2, (i - rows / 2) * squareSize + squareSize / 2, 0);\n        square.userData.offset = Math.random() * Math.PI * 2; // Random offset for individual timing\n        square.userData.scaleSpeed = 0.5 + Math.random(); // Random speed of scaling\n        scene.add(square);\n        squares.push(square);\n      }\n    }\n    function animate() {\n      requestAnimationFrame(animate);\n      const time = performance.now() * 0.001; // Time in seconds\n\n      // Grow and shrink each square randomly over time without overlap\n      squares.forEach(square => {\n        const scaleFactor = Math.sin(time * square.userData.scaleSpeed + square.userData.offset) * 0.25 + 0.75; // Scale between 0.75 and 1\n        square.scale.set(scaleFactor, scaleFactor, 1); // Apply the scale factor uniformly\n      });\n      renderer.render(scene, camera);\n    }\n    animate();\n    window.addEventListener('resize', () => {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.left = window.innerWidth / -2;\n      camera.right = window.innerWidth / 2;\n      camera.top = window.innerHeight / 2;\n      camera.bottom = window.innerHeight / -2;\n      camera.updateProjectionMatrix();\n    });\n    return () => {\n      document.body.removeChild(renderer.domElement);\n    };\n  }, []);\n  return null;\n};\n_s(FullScreenSquaresRounded, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = FullScreenSquaresRounded;\nexport default FullScreenSquaresRounded;\nvar _c;\n$RefreshReg$(_c, \"FullScreenSquaresRounded\");","map":{"version":3,"names":["React","useEffect","THREE","FullScreenSquaresRounded","_s","scene","Scene","background","Color","camera","OrthographicCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","setSize","document","body","appendChild","domElement","squareSize","geometry","PlaneGeometry","material","ShaderMaterial","uniforms","u_color","value","u_radius","vertexShader","fragmentShader","cols","Math","ceil","rows","squares","i","j","square","Mesh","set","userData","offset","random","PI","scaleSpeed","add","push","animate","requestAnimationFrame","time","performance","now","forEach","scaleFactor","sin","scale","render","addEventListener","left","right","top","bottom","updateProjectionMatrix","removeChild","_c","$RefreshReg$"],"sources":["/Users/callumd/Desktop/Tech901-WebDev/website/src/pages/Home.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport * as THREE from 'three';\n\nconst FullScreenSquaresRounded = () => {\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n\n    const camera = new THREE.OrthographicCamera(\n      window.innerWidth / -2,\n      window.innerWidth / 2,\n      window.innerHeight / 2,\n      window.innerHeight / -2,\n      1,\n      1000\n    );\n    camera.position.z = 5;\n\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n\n    const squareSize = 50;\n    const geometry = new THREE.PlaneGeometry(squareSize, squareSize);\n\n    // Custom material with rounded corners using a shader\n    const material = new THREE.ShaderMaterial({\n      uniforms: {\n        u_color: { value: new THREE.Color(0xffffff) },\n        u_radius: { value: 0.2 }, // Controls the roundness of the corners\n      },\n      vertexShader: `\n        varying vec2 vUv;\n        void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      `,\n      fragmentShader: `\n        uniform vec3 u_color;\n        uniform float u_radius;\n        varying vec2 vUv;\n\n        void main() {\n          vec2 uv = vUv * 2.0 - 1.0; // normalize uv\n          float dist = length(uv); // Distance from center\n          float radius = smoothstep(1.0, 1.0 - u_radius, dist); // Rounded corner effect\n          gl_FragColor = vec4(u_color * radius, 1.0);\n        }\n      `,\n    });\n\n    const cols = Math.ceil(window.innerWidth / squareSize);\n    const rows = Math.ceil(window.innerHeight / squareSize);\n\n    const squares = [];\n\n    // Create and place squares in the grid\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        const square = new THREE.Mesh(geometry, material);\n        square.position.set(\n          (j - cols / 2) * squareSize + squareSize / 2,\n          (i - rows / 2) * squareSize + squareSize / 2,\n          0\n        );\n        square.userData.offset = Math.random() * Math.PI * 2; // Random offset for individual timing\n        square.userData.scaleSpeed = 0.5 + Math.random(); // Random speed of scaling\n        scene.add(square);\n        squares.push(square);\n      }\n    }\n\n    function animate() {\n      requestAnimationFrame(animate);\n\n      const time = performance.now() * 0.001; // Time in seconds\n\n      // Grow and shrink each square randomly over time without overlap\n      squares.forEach((square) => {\n        const scaleFactor = Math.sin(time * square.userData.scaleSpeed + square.userData.offset) * 0.25 + 0.75; // Scale between 0.75 and 1\n        square.scale.set(scaleFactor, scaleFactor, 1); // Apply the scale factor uniformly\n      });\n\n      renderer.render(scene, camera);\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.left = window.innerWidth / -2;\n      camera.right = window.innerWidth / 2;\n      camera.top = window.innerHeight / 2;\n      camera.bottom = window.innerHeight / -2;\n      camera.updateProjectionMatrix();\n    });\n\n    return () => {\n      document.body.removeChild(renderer.domElement);\n    };\n  }, []);\n\n  return null;\n};\n\nexport default FullScreenSquaresRounded;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}