{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport * as THREE from 'three';\nconst FullScreenWaveUndulation = () => {\n  _s();\n  const [lastMousePosition, setLastMousePosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [lastTime, setLastTime] = useState(performance.now());\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n    const camera = new THREE.OrthographicCamera(window.innerWidth / -2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / -2, 1, 1000);\n    camera.position.z = 5;\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    const squareSize = 35; // Square size\n    const geometry = new THREE.PlaneGeometry(squareSize, squareSize);\n    const whiteMaterial = new THREE.MeshBasicMaterial({\n      color: 0xffffff,\n      side: THREE.DoubleSide\n    });\n    const cols = Math.ceil(window.innerWidth / squareSize);\n    const rows = Math.ceil(window.innerHeight / squareSize);\n    const squares = [];\n\n    // Create and place only white squares in a grid\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        // White square\n        const whiteSquare = new THREE.Mesh(geometry, whiteMaterial);\n        whiteSquare.position.set((j - cols / 2) * squareSize + squareSize / 2, (i - rows / 2) * squareSize + squareSize / 2, 0);\n\n        // Add hover state and animation properties\n        whiteSquare.userData.targetScale = 0.6; // Default scale\n        whiteSquare.userData.currentScale = 0.6;\n        whiteSquare.userData.isHovered = false;\n        scene.add(whiteSquare);\n        squares.push({\n          whiteSquare\n        });\n      }\n    }\n\n    // Smoothly interpolate between the current and target scale\n    const lerp = (start, end, t) => start * (1 - t) + end * t;\n\n    // Function to calculate cursor speed\n    const calculateCursorSpeed = (mouseX, mouseY) => {\n      const timeNow = performance.now();\n      const timeDelta = timeNow - lastTime;\n      const dx = mouseX - lastMousePosition.x;\n      const dy = mouseY - lastMousePosition.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      const speed = distance / timeDelta;\n      setLastMousePosition({\n        x: mouseX,\n        y: mouseY\n      });\n      setLastTime(timeNow);\n      return speed;\n    };\n\n    // Detect mouse movement and update target scale for the grid based on speed\n    const onMouseMove = event => {\n      const mouseX = event.clientX - window.innerWidth / 2;\n      const mouseY = -(event.clientY - window.innerHeight / 2);\n\n      // Calculate the speed of the cursor\n      const cursorSpeed = calculateCursorSpeed(event.clientX, event.clientY);\n\n      // Calculate which column and row the mouse is over\n      const col = Math.floor((mouseX + cols * squareSize / 2) / squareSize);\n      const row = Math.floor((mouseY + rows * squareSize / 2) / squareSize);\n\n      // Adjust radius based on cursor speed (1x1 at slow speeds to 5x5 at fast speeds)\n      const minSpeed = 0;\n      const maxSpeed = 1.5; // Adjust this value for sensitivity\n      const radius = Math.min(5, Math.max(1, Math.floor(cursorSpeed / maxSpeed * 5)));\n      if (row >= 0 && row < rows && col >= 0 && col < cols) {\n        // Reset all squares to wave animation, except the ones in the dynamic radius\n        squares.forEach(({\n          whiteSquare\n        }) => {\n          whiteSquare.userData.isHovered = false;\n        });\n\n        // Update target scale for the dynamically sized grid of squares around the cursor\n        for (let i = row - radius; i <= row + radius; i++) {\n          for (let j = col - radius; j <= col + radius; j++) {\n            if (i >= 0 && i < rows && j >= 0 && j < cols) {\n              const squareIndex = i * cols + j;\n              const {\n                whiteSquare\n              } = squares[squareIndex];\n\n              // Set the target scale to 0.9 (for the hover effect)\n              whiteSquare.userData.targetScale = 0.9;\n              whiteSquare.userData.isHovered = true;\n            }\n          }\n        }\n      }\n    };\n    document.addEventListener('mousemove', onMouseMove);\n    function animate() {\n      requestAnimationFrame(animate);\n      const time = performance.now() * 0.0004; // Slower time to reduce wave speed\n\n      squares.forEach(({\n        whiteSquare\n      }) => {\n        if (!whiteSquare.userData.isHovered) {\n          // Apply wave animation to non-hovered squares\n          const waveScale = Math.abs(Math.sin(time + whiteSquare.position.x * 0.02)) * 0.6 + 0.01;\n          whiteSquare.userData.targetScale = waveScale;\n        }\n\n        // Smoothly interpolate between the current and target scale\n        whiteSquare.userData.currentScale = lerp(whiteSquare.userData.currentScale, whiteSquare.userData.targetScale, 0.1 // Smoothing factor for organic transition\n        );\n\n        // Apply the current scale\n        whiteSquare.scale.set(whiteSquare.userData.currentScale, whiteSquare.userData.currentScale, 1);\n      });\n      renderer.render(scene, camera);\n    }\n    animate();\n    window.addEventListener('resize', () => {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.left = window.innerWidth / -2;\n      camera.right = window.innerWidth / 2;\n      camera.top = window.innerHeight / 2;\n      camera.bottom = window.innerHeight / -2;\n      camera.updateProjectionMatrix();\n    });\n    return () => {\n      document.removeEventListener('mousemove', onMouseMove);\n      document.body.removeChild(renderer.domElement);\n    };\n  }, [lastMousePosition, lastTime]);\n  return null;\n};\n_s(FullScreenWaveUndulation, \"zzka5qvQVmeu5It9qPiQzVda1Mc=\");\n_c = FullScreenWaveUndulation;\nexport default FullScreenWaveUndulation;\nvar _c;\n$RefreshReg$(_c, \"FullScreenWaveUndulation\");","map":{"version":3,"names":["React","useEffect","useState","THREE","FullScreenWaveUndulation","_s","lastMousePosition","setLastMousePosition","x","y","lastTime","setLastTime","performance","now","scene","Scene","background","Color","camera","OrthographicCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","setSize","document","body","appendChild","domElement","squareSize","geometry","PlaneGeometry","whiteMaterial","MeshBasicMaterial","color","side","DoubleSide","cols","Math","ceil","rows","squares","i","j","whiteSquare","Mesh","set","userData","targetScale","currentScale","isHovered","add","push","lerp","start","end","t","calculateCursorSpeed","mouseX","mouseY","timeNow","timeDelta","dx","dy","distance","sqrt","speed","onMouseMove","event","clientX","clientY","cursorSpeed","col","floor","row","minSpeed","maxSpeed","radius","min","max","forEach","squareIndex","addEventListener","animate","requestAnimationFrame","time","waveScale","abs","sin","scale","render","left","right","top","bottom","updateProjectionMatrix","removeEventListener","removeChild","_c","$RefreshReg$"],"sources":["/Users/callumd/Desktop/Tech901-WebDev/website/src/pages/Home.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport * as THREE from 'three';\n\nconst FullScreenWaveUndulation = () => {\n  const [lastMousePosition, setLastMousePosition] = useState({ x: 0, y: 0 });\n  const [lastTime, setLastTime] = useState(performance.now());\n\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n\n    const camera = new THREE.OrthographicCamera(\n      window.innerWidth / -2,\n      window.innerWidth / 2,\n      window.innerHeight / 2,\n      window.innerHeight / -2,\n      1,\n      1000\n    );\n    camera.position.z = 5;\n\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n\n    const squareSize = 35; // Square size\n    const geometry = new THREE.PlaneGeometry(squareSize, squareSize);\n    const whiteMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff, side: THREE.DoubleSide });\n\n    const cols = Math.ceil(window.innerWidth / squareSize);\n    const rows = Math.ceil(window.innerHeight / squareSize);\n\n    const squares = [];\n\n    // Create and place only white squares in a grid\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        // White square\n        const whiteSquare = new THREE.Mesh(geometry, whiteMaterial);\n        whiteSquare.position.set(\n          (j - cols / 2) * squareSize + squareSize / 2,\n          (i - rows / 2) * squareSize + squareSize / 2,\n          0\n        );\n\n        // Add hover state and animation properties\n        whiteSquare.userData.targetScale = 0.6; // Default scale\n        whiteSquare.userData.currentScale = 0.6;\n        whiteSquare.userData.isHovered = false;\n\n        scene.add(whiteSquare);\n        squares.push({ whiteSquare });\n      }\n    }\n\n    // Smoothly interpolate between the current and target scale\n    const lerp = (start, end, t) => start * (1 - t) + end * t;\n\n    // Function to calculate cursor speed\n    const calculateCursorSpeed = (mouseX, mouseY) => {\n      const timeNow = performance.now();\n      const timeDelta = timeNow - lastTime;\n      const dx = mouseX - lastMousePosition.x;\n      const dy = mouseY - lastMousePosition.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      const speed = distance / timeDelta;\n\n      setLastMousePosition({ x: mouseX, y: mouseY });\n      setLastTime(timeNow);\n\n      return speed;\n    };\n\n    // Detect mouse movement and update target scale for the grid based on speed\n    const onMouseMove = (event) => {\n      const mouseX = event.clientX - window.innerWidth / 2;\n      const mouseY = -(event.clientY - window.innerHeight / 2);\n\n      // Calculate the speed of the cursor\n      const cursorSpeed = calculateCursorSpeed(event.clientX, event.clientY);\n\n      // Calculate which column and row the mouse is over\n      const col = Math.floor((mouseX + cols * squareSize / 2) / squareSize);\n      const row = Math.floor((mouseY + rows * squareSize / 2) / squareSize);\n\n      // Adjust radius based on cursor speed (1x1 at slow speeds to 5x5 at fast speeds)\n      const minSpeed = 0;\n      const maxSpeed = 1.5; // Adjust this value for sensitivity\n      const radius = Math.min(5, Math.max(1, Math.floor((cursorSpeed / maxSpeed) * 5)));\n\n      if (row >= 0 && row < rows && col >= 0 && col < cols) {\n        // Reset all squares to wave animation, except the ones in the dynamic radius\n        squares.forEach(({ whiteSquare }) => {\n          whiteSquare.userData.isHovered = false;\n        });\n\n        // Update target scale for the dynamically sized grid of squares around the cursor\n        for (let i = row - radius; i <= row + radius; i++) {\n          for (let j = col - radius; j <= col + radius; j++) {\n            if (i >= 0 && i < rows && j >= 0 && j < cols) {\n              const squareIndex = i * cols + j;\n              const { whiteSquare } = squares[squareIndex];\n\n              // Set the target scale to 0.9 (for the hover effect)\n              whiteSquare.userData.targetScale = 0.9;\n              whiteSquare.userData.isHovered = true;\n            }\n          }\n        }\n      }\n    };\n\n    document.addEventListener('mousemove', onMouseMove);\n\n    function animate() {\n      requestAnimationFrame(animate);\n\n      const time = performance.now() * 0.0004; // Slower time to reduce wave speed\n\n      squares.forEach(({ whiteSquare }) => {\n        if (!whiteSquare.userData.isHovered) {\n          // Apply wave animation to non-hovered squares\n          const waveScale = Math.abs(Math.sin(time + whiteSquare.position.x * 0.02)) * 0.6 + 0.01;\n          whiteSquare.userData.targetScale = waveScale;\n        }\n\n        // Smoothly interpolate between the current and target scale\n        whiteSquare.userData.currentScale = lerp(\n          whiteSquare.userData.currentScale,\n          whiteSquare.userData.targetScale,\n          0.1 // Smoothing factor for organic transition\n        );\n\n        // Apply the current scale\n        whiteSquare.scale.set(\n          whiteSquare.userData.currentScale,\n          whiteSquare.userData.currentScale,\n          1\n        );\n      });\n\n      renderer.render(scene, camera);\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.left = window.innerWidth / -2;\n      camera.right = window.innerWidth / 2;\n      camera.top = window.innerHeight / 2;\n      camera.bottom = window.innerHeight / -2;\n      camera.updateProjectionMatrix();\n    });\n\n    return () => {\n      document.removeEventListener('mousemove', onMouseMove);\n      document.body.removeChild(renderer.domElement);\n    };\n  }, [lastMousePosition, lastTime]);\n\n  return null;\n};\n\nexport default FullScreenWaveUndulation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}